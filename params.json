{
  "name": "tvProgress",
  "tagline": "tvProgress is an easy way of displaying the progress of an ongoing task on tvOS inspired by SVProgressHUD.",
  "body": "# tvProgress\r\n\r\n![tvOS-UI](https://img.shields.io/badge/tvOS-UI%20%2F%20UX-orange.svg)\r\n[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)\r\n\r\n`tvProgress` is an easy way of displaying the progress of an ongoing task on tvOS.\r\n\r\n`tvProgress` is inspired by [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD). This library is specifically designed for tvOS and fully respects Apple design and interface guidelines regarding tvOS. It is written using Swift 2.2.\r\n\r\n![tvProgress](http://f.cl.ly/items/1x2r2z2w3e2i2v011M2k/firstloader_1-2.gif)\r\n![tvProgress](http://f.cl.ly/items/2d1R441V2C471S1B0B3i/thirdloader-2.gif)\r\n\r\n## Demo\t\t\r\n\r\nTry `tvProgress` with the demo project available in this repo.\r\n\r\n## Installation\r\n\r\n### Carthage\r\n\r\n[Carthage](https://github.com/Carthage/Carthage) is a decentralized dependency manager that builds your dependencies and provides you with binary frameworks.\r\n\r\nYou can install Carthage with [Homebrew](http://brew.sh/) using the following command:\r\n\r\n```bash\r\n$ brew update\r\n$ brew install carthage\r\n```\r\n\r\nTo integrate `tvProgress` into your Xcode project using Carthage, specify it in your `Cartfile`:\r\n\r\n```\r\ngithub \"tvProgress/tvProgress\"\r\n```\r\n\r\nRun `carthage update` to build the framework and drag the built `tvProgress.framework` (in Carthage/Build/tvOS folder) into your Xcode project (Linked Frameworks and Libraries in `Targets`).\r\n\r\n\r\n### Manually\r\n\r\n* Drag the `tvProgress.xcodeproj` file into your project.\r\n* Add the `tvProgress` framework into `Embedded Binaries`.\r\n* Near `Run` button, select `Manage scheme`.\r\n* Select your app scheme.\r\n* Click on `Edit`.\r\n* Select `Build` on the left menu.\r\n* Uncheck `Find Implicit Dependencies`. This will prevent Xcode from compiling library each time you compile your app.\r\n\r\n## Usage\r\n\r\n(see sample Xcode project in `/Demo`)\r\n\r\n`tvProgress` is created as a singleton (i.e. it doesn't need to be explicitly allocated and instantiated; you directly call `tvProgress.method`).\r\n\r\n**tvProgress usage will block the user while loading content. Use it when you need to.**\r\n\r\nUsing tvProgress is very easy. You can use it doing some very simple operations such as :\r\n\r\n```swift\r\ntvProgress.show()\r\n//add your code here\r\ntvProgress.dismiss()\r\n```\r\n\r\nYou can test if `tvProgress` is visble with the following property :\r\n```swift\r\npublic var isVisible: Bool { get }\r\n```\r\n\r\n### Showing the HUD\r\n\r\nYou can show the status of indeterminate tasks using this method:\r\n\r\n```swift\r\npublic static func show(status: String? = .None, contentView: UIView? = .None, loaderType lt: tvLoaderType? = .None, style: tvProgressStyle? = .None, withBlurView addBlurView: Bool = true, menuButtonDidPress: (() -> Void)? = .None, playButtonDidPress: (() -> Void)? = .None) -> Void\r\n```\r\n\r\nEach parameter is optional.\r\nYou can either :\r\n* simply call `show()` method to display a simple animation\r\n* specify a status to display a text\r\n* specify a contentView to display the loader on a specific UIView\r\n* specify a loader to change the animation using `tvLoaderType` enum\r\n* specify a style using `tvProgressStyle` enum\r\n* specify if you want the background Blur View via the addBlurView parameter\r\n* specify a closure to be executed when the user press the `Menu` button while `tvProgress` is displayed\r\n* specify a closure to be executed when the user press the `Play/Pause` button while `tvProgress` is displayed\r\n\r\n### Dismissing the HUD\r\n\r\nThe HUD can be dismissed using:\r\n\r\n```swift\r\npublic static func dismiss(delay: Double = 0) -> Void\r\n```\r\n\r\n`Delay` parameter is optional.\r\n\r\n### Displaying Success or Error\r\n\r\nIf your loading success or fails, you can display a message that gives information about what happened to the user.\r\n\r\n```swift\r\npublic static func showSuccessWithStatus(status: String? = .None, andSuccessImage successImage: UIImage? = .None, andStyle style: tvProgressStyle? = .None, andAction action: (label: String, closure: (Void -> Void))? = .None, menuButtonDidPress: (() -> Void)? = .None, playButtonDidPress: (() -> Void)? = .None) -> Void\r\npublic static func showErrorWithStatus(status: String? = .None, andErrorImage errorImage: UIImage? = .None, andStyle style: tvProgressStyle? = .None, andAction action: (label: String, closure: (Void -> Void))? = .None, menuButtonDidPress: (() -> Void)? = .None, playButtonDidPress: (() -> Void)? = .None) -> Void\r\n```\r\n\r\nAs it was for showing and dismissing `tvProgress`, each parameter is optional so that you can fully customize your success or error displaying.\r\nFollowing parameters are specific to success / error display :\r\n* You can specify an image to be displayed instead of the default image\r\n* You can specify an `action`. This action is a tuple that contains a label and a closure. If you specify an `action`, the label will be use to generate a button while the closure will be executed when the user presses the button.\r\n\r\nIf you specify and `action`, `tvProgress` won't dismiss. You have to call the dismiss method in your closure. If you don't specify an `action`, `tvProgress` will automatically dismiss the same way [SVProgressHUD](https://github.com/SVProgressHUD/SVProgressHUD) handles it, that means computing a display time considering the message to be displayed length or 5 seconds if no message is present.\r\n\r\n## Customization\r\n\r\nWe just saw that customization is available in every `tvProgress` method call. You also can globally customize `tvProgress` using the following properties :\r\n\r\n```swift\r\npublic var loaderType: tvLoaderType!\r\npublic var style: tvProgressStyle!\r\npublic var font: UIFont!\r\npublic var successImage: UIImage!\r\npublic var errorImage: UIImage!\r\npublic var minimumDismissDuration: Double!\r\npublic var fadeInAnimationDuration: Double!\r\npublic var fadeOutAnimationDuration: Double!\r\n```\r\n\r\nEach of these properties has to be called on `tvProgress.sharedInstance`\r\n\r\n### tvProgressStyle Enum\r\n\r\n`tvProgressStyle` is an enum that allows you to customize the appearance of `tvProgress`\r\n\r\n```swift\r\npublic enum tvProgressStyle {\r\n    case Dark\r\n    case Light\r\n    case Custom(mainColor: UIColor, secondaryColor: UIColor, blurStyle: UIBlurEffectStyle)\r\n}\r\n```\r\n\r\n* Dark style displays `tvProgress` on a dark blurStyle background\r\n* Light style displays `tvProgress` on a light blurStyle background\r\n* Custom allows you to specify mainColor, secondaryColor and a UIBlurEffectStyle\r\n\r\n### tvLoaderType Enum\r\n\r\n`tvLoaderType` is an enum that allows you to customize the appearance of the loader when `tvProgress` is displayed.\r\n\r\n```swift\r\npublic enum tvLoaderType {\r\n    case Default()\r\n    case AndroidStyle()\r\n    case Custom(cl: tvLoaderAnimatable.Type)\r\n}\r\n```\r\n\r\nThe enum has 3 different cases :\r\n* `Default` case that allows you to display a simple animated circle\r\n* `AndroidStyle` case that allows you to display a animated circle which start point is moving\r\n* `Custom` case is here to allow you to add your own animation. You have to pass a parameter that is a class type confirming to `tvLoaderAnimatable` protocol.\r\n\r\n### tvLoaderAnimatable Protocol\r\n\r\nYou can implement your own class to customize the loader appearance. You can refer to the `Demo` app to see how you can implement your own tvLoaderAnimatable class.\r\n\r\n```swift\r\npublic protocol tvLoaderAnimatable: class {\r\n    init()\r\n    func configureWithStyle(style: tvProgressStyle) -> (view: UIView, completion: () -> Void)\r\n}\r\n```\r\n\r\n`configureWithStyle` method is the main method you have to implement. This is where you are going to create a view that is animated. You have to return a tuple that contains the view and a closure. The closure will allow us to remove animations when we dismiss `tvProgress`.\r\n\r\n## Contributing to this project\r\n\r\nIf you have feature requests or bug reports, feel free to help out by sending pull requests or by [creating new issues](https://github.com/tvProgress/tvProgress/issues/new).\r\n\r\n## License\r\n\r\n`tvProgress` is distributed under the terms and conditions of the [MIT license](https://github.com/tvProgress/tvProgress/blob/master/LICENSE). The success and error icons are made by [Freepik](http://www.freepik.com) from [Flaticon](http://www.flaticon.com) and are licensed under [Creative Commons BY 3.0](http://creativecommons.org/licenses/by/3.0/).\r\n\r\n## Credits\r\n\r\n`tvProgress` is brought to you by [CÃ©dric Eugeni](https://github.com/CedricEugeni), [Antoine Cormery](https://github.com/legomanfish) and [contributors to the project](https://github.com/tvProgress/tvProgress/graphs/contributors). If you're using `tvProgress` in your project, attribution would be very appreciated.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}